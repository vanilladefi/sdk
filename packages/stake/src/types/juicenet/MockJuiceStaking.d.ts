/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MockJuiceStakingInterface extends ethers.utils.Interface {
  functions: {
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "authorizeSignalAggregator(address)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "currentStake(address,address)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "delegateDeposit(uint256,((address,uint256,uint256),bytes))": FunctionFragment;
    "delegateModifyStakes(tuple[],((address,uint256,uint256),bytes))": FunctionFragment;
    "delegateWithdraw(uint256,((address,uint256,uint256),bytes))": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "domainSeparatorV4()": FunctionFragment;
    "emergencyPause(bool)": FunctionFragment;
    "getPriceOracle(address)": FunctionFragment;
    "getRegisteredTokensAndOracles()": FunctionFragment;
    "hasRegisteredToken(address)": FunctionFragment;
    "hashDeposit(uint256,(address,uint256,uint256))": FunctionFragment;
    "hashModifyStakes(tuple[],(address,uint256,uint256))": FunctionFragment;
    "hashWithdraw(uint256,(address,uint256,uint256))": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "initialize()": FunctionFragment;
    "mintJuice(address[],uint256[])": FunctionFragment;
    "modifyStakes(tuple[])": FunctionFragment;
    "name()": FunctionFragment;
    "normalizedAggregateSignal()": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "signalAggregator()": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unstakedBalanceOf(address)": FunctionFragment;
    "updatePriceOracles(address[],address[])": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeSignalAggregator",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "currentStake",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateDeposit",
    values: [
      BigNumberish,
      {
        data: { sender: string; deadline: BigNumberish; nonce: BigNumberish };
        signature: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateModifyStakes",
    values: [
      { token: string; amount: BigNumberish; sentiment: boolean }[],
      {
        data: { sender: string; deadline: BigNumberish; nonce: BigNumberish };
        signature: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateWithdraw",
    values: [
      BigNumberish,
      {
        data: { sender: string; deadline: BigNumberish; nonce: BigNumberish };
        signature: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeparatorV4",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyPause",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceOracle",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getRegisteredTokensAndOracles",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasRegisteredToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "hashDeposit",
    values: [
      BigNumberish,
      { sender: string; deadline: BigNumberish; nonce: BigNumberish }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hashModifyStakes",
    values: [
      { token: string; amount: BigNumberish; sentiment: boolean }[],
      { sender: string; deadline: BigNumberish; nonce: BigNumberish }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "hashWithdraw",
    values: [
      BigNumberish,
      { sender: string; deadline: BigNumberish; nonce: BigNumberish }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintJuice",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "modifyStakes",
    values: [{ token: string; amount: BigNumberish; sentiment: boolean }[]]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "normalizedAggregateSignal",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "signalAggregator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakedBalanceOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePriceOracles",
    values: [string[], string[]]
  ): string;
  encodeFunctionData(functionFragment: "upgradeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "authorizeSignalAggregator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "currentStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateModifyStakes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparatorV4",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRegisteredTokensAndOracles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hasRegisteredToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashModifyStakes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "hashWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "mintJuice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "modifyStakes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "normalizedAggregateSignal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "signalAggregator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unstakedBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePriceOracles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "JUICEDeposited(address,uint256)": EventFragment;
    "JUICEWithdrawn(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "StakeAdded(address,address,bool,uint256,int256)": EventFragment;
    "StakeRemoved(address,address,bool,uint256,int256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JUICEDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "JUICEWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export type AdminChangedEvent = TypedEvent<
  [string, string] & { previousAdmin: string; newAdmin: string }
>;

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    spender: string;
    value: BigNumber;
  }
>;

export type BeaconUpgradedEvent = TypedEvent<[string] & { beacon: string }>;

export type JUICEDepositedEvent = TypedEvent<
  [string, BigNumber] & { user: string; amount: BigNumber }
>;

export type JUICEWithdrawnEvent = TypedEvent<
  [string, BigNumber] & { user: string; amount: BigNumber }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type StakeAddedEvent = TypedEvent<
  [string, string, boolean, BigNumber, BigNumber] & {
    user: string;
    token: string;
    sentiment: boolean;
    price: BigNumber;
    unstakedDiff: BigNumber;
  }
>;

export type StakeRemovedEvent = TypedEvent<
  [string, string, boolean, BigNumber, BigNumber] & {
    user: string;
    token: string;
    sentiment: boolean;
    price: BigNumber;
    unstakedDiff: BigNumber;
  }
>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; value: BigNumber }
>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export type UpgradedEvent = TypedEvent<[string] & { implementation: string }>;

export class MockJuiceStaking extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MockJuiceStakingInterface;

  functions: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    authorizeSignalAggregator(
      aggregator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    currentStake(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean] & {
        juiceStake: BigNumber;
        juiceValue: BigNumber;
        currentPrice: BigNumber;
        sentiment: boolean;
      }
    >;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delegateDeposit(
      amount: BigNumberish,
      permission: {
        data: { sender: string; deadline: BigNumberish; nonce: BigNumberish };
        signature: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delegateModifyStakes(
      stakingParams: {
        token: string;
        amount: BigNumberish;
        sentiment: boolean;
      }[],
      permission: {
        data: { sender: string; deadline: BigNumberish; nonce: BigNumberish };
        signature: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delegateWithdraw(
      amount: BigNumberish,
      permission: {
        data: { sender: string; deadline: BigNumberish; nonce: BigNumberish };
        signature: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    domainSeparatorV4(overrides?: CallOverrides): Promise<[string]>;

    emergencyPause(
      pauseStaking: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getPriceOracle(addr: string, overrides?: CallOverrides): Promise<[string]>;

    getRegisteredTokensAndOracles(
      overrides?: CallOverrides
    ): Promise<[([string, string] & { token: string; oracle: string })[]]>;

    hasRegisteredToken(
      addr: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    hashDeposit(
      amount: BigNumberish,
      permission: {
        sender: string;
        deadline: BigNumberish;
        nonce: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    hashModifyStakes(
      params: { token: string; amount: BigNumberish; sentiment: boolean }[],
      permission: {
        sender: string;
        deadline: BigNumberish;
        nonce: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    hashWithdraw(
      amount: BigNumberish,
      permission: {
        sender: string;
        deadline: BigNumberish;
        nonce: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<[string]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintJuice(
      targets: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    modifyStakes(
      stakingParams: {
        token: string;
        amount: BigNumberish;
        sentiment: boolean;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    normalizedAggregateSignal(
      overrides?: CallOverrides
    ): Promise<
      [
        [([string, BigNumber] & { token: string; weight: BigNumber })[]] & {
          longTokens: ([string, BigNumber] & {
            token: string;
            weight: BigNumber;
          })[];
        }
      ]
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signalAggregator(overrides?: CallOverrides): Promise<[string]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstakedBalanceOf(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    updatePriceOracles(
      tokens: string[],
      oracles: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  authorizeSignalAggregator(
    aggregator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  currentStake(
    user: string,
    token: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, boolean] & {
      juiceStake: BigNumber;
      juiceValue: BigNumber;
      currentPrice: BigNumber;
      sentiment: boolean;
    }
  >;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delegateDeposit(
    amount: BigNumberish,
    permission: {
      data: { sender: string; deadline: BigNumberish; nonce: BigNumberish };
      signature: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delegateModifyStakes(
    stakingParams: {
      token: string;
      amount: BigNumberish;
      sentiment: boolean;
    }[],
    permission: {
      data: { sender: string; deadline: BigNumberish; nonce: BigNumberish };
      signature: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delegateWithdraw(
    amount: BigNumberish,
    permission: {
      data: { sender: string; deadline: BigNumberish; nonce: BigNumberish };
      signature: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  domainSeparatorV4(overrides?: CallOverrides): Promise<string>;

  emergencyPause(
    pauseStaking: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getPriceOracle(addr: string, overrides?: CallOverrides): Promise<string>;

  getRegisteredTokensAndOracles(
    overrides?: CallOverrides
  ): Promise<([string, string] & { token: string; oracle: string })[]>;

  hasRegisteredToken(addr: string, overrides?: CallOverrides): Promise<boolean>;

  hashDeposit(
    amount: BigNumberish,
    permission: { sender: string; deadline: BigNumberish; nonce: BigNumberish },
    overrides?: CallOverrides
  ): Promise<string>;

  hashModifyStakes(
    params: { token: string; amount: BigNumberish; sentiment: boolean }[],
    permission: { sender: string; deadline: BigNumberish; nonce: BigNumberish },
    overrides?: CallOverrides
  ): Promise<string>;

  hashWithdraw(
    amount: BigNumberish,
    permission: { sender: string; deadline: BigNumberish; nonce: BigNumberish },
    overrides?: CallOverrides
  ): Promise<string>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintJuice(
    targets: string[],
    amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  modifyStakes(
    stakingParams: {
      token: string;
      amount: BigNumberish;
      sentiment: boolean;
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  normalizedAggregateSignal(
    overrides?: CallOverrides
  ): Promise<
    [([string, BigNumber] & { token: string; weight: BigNumber })[]] & {
      longTokens: ([string, BigNumber] & {
        token: string;
        weight: BigNumber;
      })[];
    }
  >;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  signalAggregator(overrides?: CallOverrides): Promise<string>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstakedBalanceOf(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  updatePriceOracles(
    tokens: string[],
    oracles: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: string,
    data: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    authorizeSignalAggregator(
      aggregator: string,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    currentStake(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, boolean] & {
        juiceStake: BigNumber;
        juiceValue: BigNumber;
        currentPrice: BigNumber;
        sentiment: boolean;
      }
    >;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    delegateDeposit(
      amount: BigNumberish,
      permission: {
        data: { sender: string; deadline: BigNumberish; nonce: BigNumberish };
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    delegateModifyStakes(
      stakingParams: {
        token: string;
        amount: BigNumberish;
        sentiment: boolean;
      }[],
      permission: {
        data: { sender: string; deadline: BigNumberish; nonce: BigNumberish };
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    delegateWithdraw(
      amount: BigNumberish,
      permission: {
        data: { sender: string; deadline: BigNumberish; nonce: BigNumberish };
        signature: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    domainSeparatorV4(overrides?: CallOverrides): Promise<string>;

    emergencyPause(
      pauseStaking: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    getPriceOracle(addr: string, overrides?: CallOverrides): Promise<string>;

    getRegisteredTokensAndOracles(
      overrides?: CallOverrides
    ): Promise<([string, string] & { token: string; oracle: string })[]>;

    hasRegisteredToken(
      addr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    hashDeposit(
      amount: BigNumberish,
      permission: {
        sender: string;
        deadline: BigNumberish;
        nonce: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    hashModifyStakes(
      params: { token: string; amount: BigNumberish; sentiment: boolean }[],
      permission: {
        sender: string;
        deadline: BigNumberish;
        nonce: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    hashWithdraw(
      amount: BigNumberish,
      permission: {
        sender: string;
        deadline: BigNumberish;
        nonce: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<string>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(overrides?: CallOverrides): Promise<void>;

    mintJuice(
      targets: string[],
      amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    modifyStakes(
      stakingParams: {
        token: string;
        amount: BigNumberish;
        sentiment: boolean;
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    normalizedAggregateSignal(
      overrides?: CallOverrides
    ): Promise<
      [([string, BigNumber] & { token: string; weight: BigNumber })[]] & {
        longTokens: ([string, BigNumber] & {
          token: string;
          weight: BigNumber;
        })[];
      }
    >;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    signalAggregator(overrides?: CallOverrides): Promise<string>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unstakedBalanceOf(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updatePriceOracles(
      tokens: string[],
      oracles: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: string,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): TypedEventFilter<
      [string, string],
      { previousAdmin: string; newAdmin: string }
    >;

    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): TypedEventFilter<
      [string, string],
      { previousAdmin: string; newAdmin: string }
    >;

    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    "BeaconUpgraded(address)"(
      beacon?: string | null
    ): TypedEventFilter<[string], { beacon: string }>;

    BeaconUpgraded(
      beacon?: string | null
    ): TypedEventFilter<[string], { beacon: string }>;

    "JUICEDeposited(address,uint256)"(
      user?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    JUICEDeposited(
      user?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    "JUICEWithdrawn(address,uint256)"(
      user?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    JUICEWithdrawn(
      user?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "StakeAdded(address,address,bool,uint256,int256)"(
      user?: string | null,
      token?: string | null,
      sentiment?: null,
      price?: null,
      unstakedDiff?: null
    ): TypedEventFilter<
      [string, string, boolean, BigNumber, BigNumber],
      {
        user: string;
        token: string;
        sentiment: boolean;
        price: BigNumber;
        unstakedDiff: BigNumber;
      }
    >;

    StakeAdded(
      user?: string | null,
      token?: string | null,
      sentiment?: null,
      price?: null,
      unstakedDiff?: null
    ): TypedEventFilter<
      [string, string, boolean, BigNumber, BigNumber],
      {
        user: string;
        token: string;
        sentiment: boolean;
        price: BigNumber;
        unstakedDiff: BigNumber;
      }
    >;

    "StakeRemoved(address,address,bool,uint256,int256)"(
      user?: string | null,
      token?: string | null,
      sentiment?: null,
      price?: null,
      unstakedDiff?: null
    ): TypedEventFilter<
      [string, string, boolean, BigNumber, BigNumber],
      {
        user: string;
        token: string;
        sentiment: boolean;
        price: BigNumber;
        unstakedDiff: BigNumber;
      }
    >;

    StakeRemoved(
      user?: string | null,
      token?: string | null,
      sentiment?: null,
      price?: null,
      unstakedDiff?: null
    ): TypedEventFilter<
      [string, string, boolean, BigNumber, BigNumber],
      {
        user: string;
        token: string;
        sentiment: boolean;
        price: BigNumber;
        unstakedDiff: BigNumber;
      }
    >;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;

    "Upgraded(address)"(
      implementation?: string | null
    ): TypedEventFilter<[string], { implementation: string }>;

    Upgraded(
      implementation?: string | null
    ): TypedEventFilter<[string], { implementation: string }>;
  };

  estimateGas: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    authorizeSignalAggregator(
      aggregator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    currentStake(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delegateDeposit(
      amount: BigNumberish,
      permission: {
        data: { sender: string; deadline: BigNumberish; nonce: BigNumberish };
        signature: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delegateModifyStakes(
      stakingParams: {
        token: string;
        amount: BigNumberish;
        sentiment: boolean;
      }[],
      permission: {
        data: { sender: string; deadline: BigNumberish; nonce: BigNumberish };
        signature: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delegateWithdraw(
      amount: BigNumberish,
      permission: {
        data: { sender: string; deadline: BigNumberish; nonce: BigNumberish };
        signature: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    domainSeparatorV4(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyPause(
      pauseStaking: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getPriceOracle(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    getRegisteredTokensAndOracles(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hasRegisteredToken(
      addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashDeposit(
      amount: BigNumberish,
      permission: {
        sender: string;
        deadline: BigNumberish;
        nonce: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashModifyStakes(
      params: { token: string; amount: BigNumberish; sentiment: boolean }[],
      permission: {
        sender: string;
        deadline: BigNumberish;
        nonce: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    hashWithdraw(
      amount: BigNumberish,
      permission: {
        sender: string;
        deadline: BigNumberish;
        nonce: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintJuice(
      targets: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    modifyStakes(
      stakingParams: {
        token: string;
        amount: BigNumberish;
        sentiment: boolean;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    normalizedAggregateSignal(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signalAggregator(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstakedBalanceOf(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updatePriceOracles(
      tokens: string[],
      oracles: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    authorizeSignalAggregator(
      aggregator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    currentStake(
      user: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delegateDeposit(
      amount: BigNumberish,
      permission: {
        data: { sender: string; deadline: BigNumberish; nonce: BigNumberish };
        signature: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delegateModifyStakes(
      stakingParams: {
        token: string;
        amount: BigNumberish;
        sentiment: boolean;
      }[],
      permission: {
        data: { sender: string; deadline: BigNumberish; nonce: BigNumberish };
        signature: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delegateWithdraw(
      amount: BigNumberish,
      permission: {
        data: { sender: string; deadline: BigNumberish; nonce: BigNumberish };
        signature: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    domainSeparatorV4(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyPause(
      pauseStaking: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getPriceOracle(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRegisteredTokensAndOracles(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hasRegisteredToken(
      addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashDeposit(
      amount: BigNumberish,
      permission: {
        sender: string;
        deadline: BigNumberish;
        nonce: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashModifyStakes(
      params: { token: string; amount: BigNumberish; sentiment: boolean }[],
      permission: {
        sender: string;
        deadline: BigNumberish;
        nonce: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    hashWithdraw(
      amount: BigNumberish,
      permission: {
        sender: string;
        deadline: BigNumberish;
        nonce: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintJuice(
      targets: string[],
      amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    modifyStakes(
      stakingParams: {
        token: string;
        amount: BigNumberish;
        sentiment: boolean;
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    normalizedAggregateSignal(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signalAggregator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstakedBalanceOf(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updatePriceOracles(
      tokens: string[],
      oracles: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: string,
      data: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
