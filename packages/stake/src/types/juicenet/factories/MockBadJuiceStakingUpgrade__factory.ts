/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockBadJuiceStakingUpgrade,
  MockBadJuiceStakingUpgradeInterface,
} from "../MockBadJuiceStakingUpgrade";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address",
      },
    ],
    name: "AdminChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address",
      },
    ],
    name: "BeaconUpgraded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Upgraded",
    type: "event",
  },
  {
    inputs: [],
    name: "addedField",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "fieldValue",
        type: "uint256",
      },
    ],
    name: "initializeOnUpgrade",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x60a06040523060805234801561001457600080fd5b506080516108606100446000396000818160cc015281816101150152818161019501526101d501526108606000f3fe60806040526004361061003f5760003560e01c80631fe0a34a146100445780633659cfe6146100665780634f1ef28614610086578063bc4c9c0b14610099575b600080fd5b34801561005057600080fd5b5061006461005f3660046105c4565b606555565b005b34801561007257600080fd5b506100646100813660046105f9565b6100c1565b61006461009436600461062a565b61018a565b3480156100a557600080fd5b506100af60655481565b60405190815260200160405180910390f35b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156101135760405162461bcd60e51b815260040161010a906106ec565b60405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661014561023b565b6001600160a01b03161461016b5760405162461bcd60e51b815260040161010a90610738565b6040805160008082526020820190925261018791839190610269565b50565b306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614156101d35760405162461bcd60e51b815260040161010a906106ec565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031661020561023b565b6001600160a01b03161461022b5760405162461bcd60e51b815260040161010a90610738565b61023782826001610269565b5050565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc546001600160a01b031690565b600061027361023b565b905061027e846103b4565b60008351118061028b5750815b1561029c5761029a8484610459565b505b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143805460ff166103ad57805460ff191660011781556040516001600160a01b038316602482015261031b90869060440160408051601f198184030181529190526020810180516001600160e01b0316631b2ce7f360e11b179052610459565b50805460ff1916815561032c61023b565b6001600160a01b0316826001600160a01b0316146103a45760405162461bcd60e51b815260206004820152602f60248201527f45524331393637557067726164653a207570677261646520627265616b73206660448201526e75727468657220757067726164657360881b606482015260840161010a565b6103ad85610544565b5050505050565b803b6104185760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b606482015260840161010a565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80546001600160a01b0319166001600160a01b0392909216919091179055565b6060823b6104b85760405162461bcd60e51b815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f6044820152651b9d1c9858dd60d21b606482015260840161010a565b600080846001600160a01b0316846040516104d391906107b4565b600060405180830381855af49150503d806000811461050e576040519150601f19603f3d011682016040523d82523d6000602084013e610513565b606091505b509150915061053b828260405180606001604052806027815260200161080460279139610584565b95945050505050565b61054d816103b4565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606083156105935750816105bd565b8251156105a35782518084602001fd5b8160405162461bcd60e51b815260040161010a91906107d0565b9392505050565b6000602082840312156105d657600080fd5b5035919050565b80356001600160a01b03811681146105f457600080fd5b919050565b60006020828403121561060b57600080fd5b6105bd826105dd565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561063d57600080fd5b610646836105dd565b9150602083013567ffffffffffffffff8082111561066357600080fd5b818501915085601f83011261067757600080fd5b81358181111561068957610689610614565b604051601f8201601f19908116603f011681019083821181831017156106b1576106b1610614565b816040528281528860208487010111156106ca57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b19195b1959d85d1958d85b1b60a21b606082015260800190565b6020808252602c908201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060408201526b6163746976652070726f787960a01b606082015260800190565b60005b8381101561079f578181015183820152602001610787565b838111156107ae576000848401525b50505050565b600082516107c6818460208701610784565b9190910192915050565b60208152600082518060208401526107ef816040850160208701610784565b601f01601f1916919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220283f01520ebead125715f808dc460070fd1cda09120494b1ab28ad0e5e669c0064736f6c634300080a0033";

export class MockBadJuiceStakingUpgrade__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockBadJuiceStakingUpgrade> {
    return super.deploy(overrides || {}) as Promise<MockBadJuiceStakingUpgrade>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockBadJuiceStakingUpgrade {
    return super.attach(address) as MockBadJuiceStakingUpgrade;
  }
  connect(signer: Signer): MockBadJuiceStakingUpgrade__factory {
    return super.connect(signer) as MockBadJuiceStakingUpgrade__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockBadJuiceStakingUpgradeInterface {
    return new utils.Interface(_abi) as MockBadJuiceStakingUpgradeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockBadJuiceStakingUpgrade {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockBadJuiceStakingUpgrade;
  }
}
