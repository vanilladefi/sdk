/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockPriceOracle,
  MockPriceOracleInterface,
} from "../MockPriceOracle";

const _abi = [
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint80",
        name: "roundId",
        type: "uint80",
      },
    ],
    name: "getRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestPrice",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "latestRoundData",
    outputs: [
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "uint80",
        name: "",
        type: "uint80",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "newPrice",
        type: "int256",
      },
    ],
    name: "setPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061037a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063313ce5671461005c5780639a6fc8f514610070578063a3e6ba94146100b7578063f7a30806146100cd578063feaf968c14610153575b600080fd5b604051600881526020015b60405180910390f35b61008361007e366004610290565b61015b565b604080516001600160501b03968716815260208101959095528401929092526060830152909116608082015260a001610067565b6100bf6101c7565b604051908152602001610067565b6101516100db3660046102c0565b6040805180820190915290815242602082019081526000805460018101825590805291517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563600290930292830155517f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56490910155565b005b61008361021c565b600080808080808061016e6001896102ef565b6001600160501b03168154811061018757610187610317565b6000918252602091829020604080518082019091526002929092020180548083526001909101549190920181905297989097965086955088945092505050565b60008054819081906101db9060019061032d565b815481106101eb576101eb610317565b6000918252602091829020604080518082019091526002909202018054808352600190910154919092015292915050565b60008054819081908190819081806102356001846102ef565b6001600160501b03168154811061024e5761024e610317565b60009182526020918290206040805180820190915260029290920201805480835260019091015491909201819052929890975091955085945087935090915050565b6000602082840312156102a257600080fd5b81356001600160501b03811681146102b957600080fd5b9392505050565b6000602082840312156102d257600080fd5b5035919050565b634e487b7160e01b600052601160045260246000fd5b60006001600160501b038381169083168181101561030f5761030f6102d9565b039392505050565b634e487b7160e01b600052603260045260246000fd5b60008282101561033f5761033f6102d9565b50039056fea264697066735822122092262cbcae06c8e809a22c80b386be948d4a04e2f9a0812c368f12e18cb7ef5364736f6c634300080a0033";

export class MockPriceOracle__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockPriceOracle> {
    return super.deploy(overrides || {}) as Promise<MockPriceOracle>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockPriceOracle {
    return super.attach(address) as MockPriceOracle;
  }
  connect(signer: Signer): MockPriceOracle__factory {
    return super.connect(signer) as MockPriceOracle__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockPriceOracleInterface {
    return new utils.Interface(_abi) as MockPriceOracleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockPriceOracle {
    return new Contract(address, _abi, signerOrProvider) as MockPriceOracle;
  }
}
