/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockNonUUPSJuiceStakingUpgrade,
  MockNonUUPSJuiceStakingUpgradeInterface,
} from "../MockNonUUPSJuiceStakingUpgrade";

const _abi = [
  {
    inputs: [],
    name: "addedField",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "fieldValue",
        type: "uint256",
      },
    ],
    name: "initializeOnUpgrade",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060b18061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80631fe0a34a146037578063bc4c9c0b146049575b600080fd5b604760423660046063565b600055565b005b605160005481565b60405190815260200160405180910390f35b600060208284031215607457600080fd5b503591905056fea2646970667358221220ff3c38d6d794a8a1e06e0453d9edc211c50f050c97174050e3e181ec51c51c8464736f6c634300080a0033";

export class MockNonUUPSJuiceStakingUpgrade__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockNonUUPSJuiceStakingUpgrade> {
    return super.deploy(
      overrides || {}
    ) as Promise<MockNonUUPSJuiceStakingUpgrade>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockNonUUPSJuiceStakingUpgrade {
    return super.attach(address) as MockNonUUPSJuiceStakingUpgrade;
  }
  connect(signer: Signer): MockNonUUPSJuiceStakingUpgrade__factory {
    return super.connect(signer) as MockNonUUPSJuiceStakingUpgrade__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockNonUUPSJuiceStakingUpgradeInterface {
    return new utils.Interface(_abi) as MockNonUUPSJuiceStakingUpgradeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockNonUUPSJuiceStakingUpgrade {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockNonUUPSJuiceStakingUpgrade;
  }
}
